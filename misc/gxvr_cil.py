
#%%
# 
import numpy as np

source_position = [0, -150, 0] 
detector_position= [0, 80, 0] 
detector_direction_x = [1, 0, 0] 
detector_direction_y = [0, 0, 1] 
rotation_axis_position = [0, 0, 0] 
rotation_axis_direction=[0,0,1] 
num_pixels = [200,250]
pixel_size = [0.5,0.5]

#%%
angle_string = "0.           0.96514745   1.93029491   2.89544236   3.86058981 \
   4.82573727   5.79088472   6.75603217   7.72117962   8.68632708\
   9.65147453  10.61662198  11.58176944  12.54691689  13.51206434\
  14.4772118   15.44235925  16.4075067   17.37265416  18.33780161\
  19.30294906  20.26809651  21.23324397  22.19839142  23.16353887\
  24.12868633  25.09383378  26.05898123  27.02412869  27.98927614\
  28.95442359  29.91957105  30.8847185   31.84986595  32.8150134\
  33.78016086  34.74530831  35.71045576  36.67560322  37.64075067\
  38.60589812  39.57104558  40.53619303  41.50134048  42.46648794\
  43.43163539  44.39678284  45.36193029  46.32707775  47.2922252\
  48.25737265  49.22252011  50.18766756  51.15281501  52.11796247\
  53.08310992  54.04825737  55.01340483  55.97855228  56.94369973\
  57.90884718  58.87399464  59.83914209  60.80428954  61.769437\
  62.73458445  63.6997319   64.66487936  65.63002681  66.59517426\
  67.56032172  68.52546917  69.49061662  70.45576408  71.42091153\
  72.38605898  73.35120643  74.31635389  75.28150134  76.24664879\
  77.21179625  78.1769437   79.14209115  80.10723861  81.07238606\
  82.03753351  83.00268097  83.96782842  84.93297587  85.89812332\
  86.86327078  87.82841823  88.79356568  89.75871314  90.72386059\
  91.68900804  92.6541555   93.61930295  94.5844504   95.54959786\
  96.51474531  97.47989276  98.44504021  99.41018767 100.37533512\
 101.34048257 102.30563003 103.27077748 104.23592493 105.20107239\
 106.16621984 107.13136729 108.09651475 109.0616622  110.02680965\
 110.9919571  111.95710456 112.92225201 113.88739946 114.85254692\
 115.81769437 116.78284182 117.74798928 118.71313673 119.67828418\
 120.64343164 121.60857909 122.57372654 123.53887399 124.50402145\
 125.4691689  126.43431635 127.39946381 128.36461126 129.32975871\
 130.29490617 131.26005362 132.22520107 133.19034853 134.15549598\
 135.12064343 136.08579088 137.05093834 138.01608579 138.98123324\
 139.9463807  140.91152815 141.8766756  142.84182306 143.80697051\
 144.77211796 145.73726542 146.70241287 147.66756032 148.63270777\
 149.59785523 150.56300268 151.52815013 152.49329759 153.45844504\
 154.42359249 155.38873995 156.3538874  157.31903485 158.28418231\
 159.24932976 160.21447721 161.17962466 162.14477212 163.10991957\
 164.07506702 165.04021448 166.00536193 166.97050938 167.93565684\
 168.90080429 169.86595174 170.8310992  171.79624665 172.7613941\
 173.72654155 174.69168901 175.65683646 176.62198391 177.58713137\
 178.55227882 179.51742627 180.48257373 181.44772118 182.41286863\
 183.37801609 184.34316354 185.30831099 186.27345845 187.2386059\
 188.20375335 189.1689008  190.13404826 191.09919571 192.06434316\
 193.02949062 193.99463807 194.95978552 195.92493298 196.89008043\
 197.85522788 198.82037534 199.78552279 200.75067024 201.71581769\
 202.68096515 203.6461126  204.61126005 205.57640751 206.54155496\
 207.50670241 208.47184987 209.43699732 210.40214477 211.36729223\
 212.33243968 213.29758713 214.26273458 215.22788204 216.19302949\
 217.15817694 218.1233244  219.08847185 220.0536193  221.01876676\
 221.98391421 222.94906166 223.91420912 224.87935657 225.84450402\
 226.80965147 227.77479893 228.73994638 229.70509383 230.67024129\
 231.63538874 232.60053619 233.56568365 234.5308311  235.49597855\
 236.46112601 237.42627346 238.39142091 239.35656836 240.32171582\
 241.28686327 242.25201072 243.21715818 244.18230563 245.14745308\
 246.11260054 247.07774799 248.04289544 249.0080429  249.97319035\
 250.9383378  251.90348525 252.86863271 253.83378016 254.79892761\
 255.76407507 256.72922252 257.69436997 258.65951743 259.62466488\
 260.58981233 261.55495979 262.52010724 263.48525469 264.45040214\
 265.4155496  266.38069705 267.3458445  268.31099196 269.27613941\
 270.24128686 271.20643432 272.17158177 273.13672922 274.10187668\
 275.06702413 276.03217158 276.99731903 277.96246649 278.92761394\
 279.89276139 280.85790885 281.8230563  282.78820375 283.75335121\
 284.71849866 285.68364611 286.64879357 287.61394102 288.57908847\
 289.54423592 290.50938338 291.47453083 292.43967828 293.40482574\
 294.36997319 295.33512064 296.3002681  297.26541555 298.230563\
 299.19571046 300.16085791 301.12600536 302.09115282 303.05630027\
 304.02144772 304.98659517 305.95174263 306.91689008 307.88203753\
 308.84718499 309.81233244 310.77747989 311.74262735 312.7077748\
 313.67292225 314.63806971 315.60321716 316.56836461 317.53351206\
 318.49865952 319.46380697 320.42895442 321.39410188 322.35924933\
 323.32439678 324.28954424 325.25469169 326.21983914 327.1849866\
 328.15013405 329.1152815  330.08042895 331.04557641 332.01072386\
 332.97587131 333.94101877 334.90616622 335.87131367 336.83646113\
 337.80160858 338.76675603 339.73190349 340.69705094 341.66219839\
 342.62734584 343.5924933  344.55764075 345.5227882  346.48793566\
 347.45308311 348.41823056 349.38337802 350.34852547 351.31367292\
 352.27882038 353.24396783 354.20911528 355.17426273 356.13941019\
 357.10455764 358.06970509 359.03485255 360."

# %%
angles = np.asarray([float(el) for el in angle_string.split()], dtype=np.float32)
# %%
from cil.framework import AcquisitionGeometry

ag = AcquisitionGeometry.create_Cone3D( source_position=source_position,\
                                        detector_position=detector_position, \
                                        detector_direction_x=detector_direction_x, \
                                        detector_direction_y=detector_direction_y,\
                                        rotation_axis_direction=rotation_axis_direction, \
                                        rotation_axis_position=rotation_axis_position)
ag.set_panel(num_pixels=tuple(num_pixels), \
             pixel_size=tuple(pixel_size)
             )           
ag.set_angles(angles=-angles+180, angle_unit='degree')               
# %%
# from cil.utilities.display import show2D, show_geometry

# show_geometry(ag)

import os
from cil.io import TIFFStackReader
import glob

data_dir = os.path.abspath("C:/Users/ofn77899/Data/LLion/VL_install_test/GVXR-Images/AMAZE_Al")
projection_files = glob.glob(os.path.join(data_dir, "AMAZE_Al_*"))


reader = TIFFStackReader(file_name=projection_files)
gvxr_data = reader.read_as_AcquisitionData(ag)

# normalize to 255

gvxr_data /= 255.


# show2D(gvxr_data, slice_list=[i*60 for i in range(6)], cmap='magma')
from cil.processors import TransmissionAbsorptionConverter

data = TransmissionAbsorptionConverter()(gvxr_data)

# show2D(data, slice_list=[i*60 for i in range(6)], cmap='magma')


from cil.recon import FDK
data.reorder('tigre')
recon = FDK(data).run()

show2D(recon, cmap='gray', fix_range=(-0.01, 0.08), slice_list=[175,150])

# %%
